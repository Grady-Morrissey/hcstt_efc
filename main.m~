% EFC with fiber, code for lab demonstration
% Notes:
%   - Regularization parameter: which one to chose? This choice affects how
%   fast the dark hole is digged, and the damping of the actuators pulse
%   - Normalization of the model WF: the propagated model used to build the
%   G matrix and to do the sensing of the actual WF, has to be normalized
%   in the same way as the actual WF.
clear all;
close all;
addpath(genpath('utils'),genpath('export_scripts'));


hcstt_Initialize();

N = 2^10;
apRad = 2^6;
[X,Y] = meshgrid(-N/2:N/2-1); 
xvals = X(1,:);yvals = Y(:,1);
[THETA,RHO] = cart2pol(X,Y);
lambdaOverD = N/apRad/2; % lambda/D (samples) 

lambda0 = 800e-9;
numOfWavelengths = 1; % monochromatic, use 1
percentBW = 10; % percent bandwidth=(Delta lambda)/lambda*100
BW = percentBW/100; % bandwidth 
if(numOfWavelengths > 1)
    lam_fracs = linspace(1-BW/2,1+BW/2,numOfWavelengths);
else
    lam_fracs = 1;
end
lam_arr = lambda0*lam_fracs;

fiberDiam = 2*0.71; % Fiber diam. (lambda_0/D)
% These are parameters used in the propagation routines
use_fiber = true;
normal_EFC = false;
    
label = '_test';
outDir = ['output',filesep,'EFC_wFiber_LabDemonstration',label,filesep];
mkdir(outDir);

% Position of the fiber on the image plane. (lambda_0/D)
x_fib = 3;
y_fib = 0;

info.x_fib = x_fib;
info.y_fib = y_fib;
info.fiberDiam = fiberDiam;
info.useGPU = false;
info.apRad = apRad;
info.lambdaOverD = lambdaOverD;
info.RHO = RHO;
info.THETA = THETA;
info.N = N;
info.lambda0 = lambda0;
info.lam_arr = lam_arr;
info.numOfWavelengths = numOfWavelengths;
info.useApodizer = false;
info.useGPU = false; 
info.FPM = exp(1i*6*THETA);
info.outDir = outDir;
info.xvals = xvals;
info.yvals = yvals;
info.use_fiber = use_fiber;
info.normal_EFC = normal_EFC;

% Model of the fiber mode shape
[THETA_fib,RHO_fib] = cart2pol(X - x_fib * lambdaOverD ,Y);
fiberDiam_pixII = (fiberDiam*lambdaOverD);
fibermode0 = sqrt(2/(pi*(fiberDiam_pixII/2)^2))* ...
        exp(-(RHO_fib/(fiberDiam_pixII/2)).^2);
info.fibermode0 = fibermode0;

% Total Power to normilize model Gu and intensity from the fiber. Need of
% normalization factor
totalPower = gimmeTotalPower(); %Total power read through the fiber
%

info.LPM = ones(N,N);
wfin_noerrors = complex(ones(N, N), zeros(N, N)) ;
wfin_noerrors(RHO > apRad) = 0;
% wf2 = wf2*sqrt(normPower);

normPower = hcstt_NormalizationFactor(wfin_noerrors,info);

info.normPower = normPower;

info.LPM = exp(-(RHO/(0.9*apRad)).^1000);

Nact = 12;  % Number of DM actuators, Nact^2

% Load the DM influence functions
ac_spac = round(2*apRad/Nact);
infl = loadInfluenceFunction( 'influence_dm5v2.fits', ac_spac ); % Influence function. Need of a model for actual DM
info.ac_spac = ac_spac;
info.infl = infl;

% Initialize DMs, etc. 
surf_DM10 = zeros(N); % Intialize the DM surface to flat
DM1_strokes = zeros(N); % Intialize the DM strokes to flat
us = zeros(1,Nact^2); % Initialize the fractional stroke changes to zero
us_total = zeros(1,Nact^2); % Initialize the fractional stroke changes to zero
poke_amp = 1e-9; % Initialize the poke amplitude
    
maxits = 33; % maximum number of EFC iterations allowed
Gcount = 0; % counter for number of times G matrix was used
Gcountmin = 10; % Minimum number of times to use a G matrix
curr_coupl_SMF = 1;
recalc_G = true; % Initialize the flag to re-calculate the G matrix
% regvals = logspace(-6,-1,6); % Range of regularization parameters to test
regval = nan; % Initial regularization value
coupl_SMF_in_DH = []; % Array to keep track of dark hole irradiance 

[posDM_x,posDM_y] = hcstt_PositionDMActuators(N,apRad);

% Run EFC iterations 
for k = 1:maxits
    fprintf('Iteration: %d ',k);
        
    % Update actuator height with the LMS solution, us
    us_total = us_total + us;
    
    % Build DM surface from stroke amplitudes 
    count = 0; 
    for ix = 1:Nact
        for iy = 1:Nact
            count = count + 1;
            xpos = round(posDM_x(ix));%round(N/2+1+(ix-Nact/2-0.5)*ac_spac);
            ypos = round(posDM_y(iy));%round(N/2+1+(iy-Nact/2-0.5)*ac_spac);
            DM1_strokes(xpos,ypos) = us(count)*poke_amp + DM1_strokes(xpos,ypos);
        end
    end
    surf_DM10 = conv2(DM1_strokes,infl,'same');

    %Make of plot of the current DM surface 
    fig0 = figure('visible','off','color','none');
    imagesc(xvals/apRad,yvals/apRad,surf_DM10*1e9);
    colormap(gray(256));hcb=colorbar;
    %caxis([0 10e-9]);
    axis image;%axis off;% 
    axis([-1.1 1.1 -1.1 1.1]);set(gca,'XTick',-1:0.5:1,'YTick',-1:0.5:1);
    %text(-1.05,0.98,'{\bf(c)}','FontSize',12,'Color','w')
    hx = xlabel('{\itx} / {\itR}');
    hy = ylabel('{\ity} / {\itR}');
    title('DM1 surface height (nm)');
    set(gca,'FontSize', 10,...
                    'TickDir','out',...
                    'TickLength',[.02 .02]);
    set(gca,'YDir','normal');
    set(fig0,'units', 'inches', 'Position', [0 0 5 5])
    export_fig([info.outDir,'DM1surf_',num2str(k),'.png']);
    close(fig0);    
        
    % Simualte WF in image plane with current DM shape, this is needed for the WF sensing 
    wf2_current = prescription_DM1toImage_compact_vFiberCoupling_broadband( wfin_noerrors, surf_DM10, true, info);
    wf2_current = wf2_current * normPower;
    
    % Perform WF sensing
    Eab =  EFSensing_EFCwFiber_labTest(wf2_current,us_total,info);
    %
    
    % Build WF vector
    Eabreg = [Eab(1);Eab(2); zeros(Nact^2,1)];

    % Check progress 
    
    % Update intensity over fiber
    curr_int = getIntensityFromFiber(us_total);  % WATCH OUT: us is a 12^2x1 array with the actuators heights in nm
    
    prev_coupl_SMF = curr_coupl_SMF;
    curr_coupl_SMF = sum(abs(Eab)^2/totalPower)/numel(lam_fracs);
    fprintf(fprintf('Coupl SMF: %g ',curr_coupl_SMF));fprintf('Reg. Val.: %g ',regval);
    coupl_SMF_in_DH = [coupl_SMF_in_DH, curr_coupl_SMF];
    curr_irr = sum(sum(abs(Eab).^2))/numel(Eab(1))/numel(lam_fracs);
    
    % Determine whether to continue and/or calculate a new G matrix
    if(prev_coupl_SMF<curr_coupl_SMF)
        return;
    elseif(Gcount > Gcountmin)
        recalc_G = true;
    end

    % Sets the new DM poke amplitude based on current dark hole irr. 
    poke_amp = sqrt(curr_irr)*lambda0;
        
    % calculate the G matrix, if needed
    if(recalc_G)
        Gcount = 0;
        disp('Calculating the G matrix for EFC.')
        G = calculateGmatrix_vFiberCouplingOneFibxel_broadband( wf1_noerrors, surf_DM10, [], Nact, ac_spac, poke_amp, infl, lambda0, N , info);
        save(['output\G.mat'],'G');
        recalc_G = false;
    end
    Gcount = Gcount + 1; % Count the times the current G matrix has bee used
            
    Gsplit = [real(G);imag(G)]; % Splits the G-matrix into real and imaginary parts 
    
    % Regalarization value, to be updated each iteration?
    regval = 0.0001; % To be determined
    %

    Greg = [Gsplit;regval*eye(Nact^2)]; % Final G matrix to be used
    
    % Compute the  new actuator heights
    us = -1*pinv(Greg)*Eabreg; %  
    %

    save([info.outDir,'DMshapes.mat'],'surf_DM10');
    save([info.outDir,'DM1_strokes.mat'],'DM1_strokes');
end
    
fig0 = figure(2);
plot(1:k,log10(coupl_SMF_in_DH))
xlabel('Iteration')
ylabel('log(output coupling)')
title(['Coupling vs it'])
% legend('Coupling SMF','Coupling MMF');
export_fig([outDir,'FigCoupling_vs_it',label,'.png'],'-r300');

% Save actual data
save([info.outDir,'coupl_SMF_in_DH.mat'],'coupl_SMF_in_DH');

% fig0 = figure(3);
% plot(1:k,log10(Spl_pix_arr))
% hold on
% plot(1:k,log10(Spl_fib_arr))
% hold on
% plot(1:k,log10(S_pix_arr))
% hold on
% plot(1:k,log10(S_fib_arr))
% hold off
% xlabel('Iteration')
% ylabel('log(Throughput)')
% title(['Throughput vs it'])
% legend('Throughput planet MMF','Throughput planet SMF','Throughput speckles MMF','Throughput speckles SMF');
% export_fig([outDir,'FigThroughput_vs_it',label,'.png'],'-r300');
% 
% fig0 = figure(4);
% plot(1:k,log10(Spl_pix_arr))
% hold on
% plot(1:k,log10(Spl_fib_arr))
% hold off
% xlabel('Iteration')
% ylabel('log(Throughput)')
% title(['Throughput vs it'])
% legend('Throughput planet MMF','Throughput planet SMF');
% export_fig([outDir,'FigThroughputPlanet_vs_it',label,'.png'],'-r300');

